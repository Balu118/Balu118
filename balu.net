import hudson.tasks.test.AbstractTestResultAction
import hudson.model.Actionable

def bigsql_config = "/usr/ibmpacks/IBM-Big_SQL/7.1.0.0/bigsql-cli/config/bigsql-config.default"
def smoke_cmd     = "/usr/ibmpacks/IBM-Big_SQL/7.1.0.0/bigsql-cli/bigsql-admin -smoke"
def config_ini    = "/usr/ibmpacks/IBM-Big_SQL/7.1.0.0/bigsql-cli/config/ucconfig.ini"
def uc_install    = "/usr/ibmpacks/IBM-Big_SQL/7.1.0.0/bigsql-cli/uc-install"

def test_result_file
def junit_summary
def COLOR_MAP = [
    'SUCCESS': 'good', 
    'FAILURE': 'danger',
]

pipeline 
{
    
    agent {
            label "${env.CLOUDERA_HOST}"
    }   
   
   
    stages 
    {
        stage("Build Prerequisite Checks")
        {
            steps
            {
                script 
                {
                      echo "Build Prerequisite Checks"
	                 //common = load "common.groovy"
	                  //connectivity = load "connectivity.groovy"
		              env.workspace = pwd()
                }
            }
        } 

      stage("Fetch Git Repos")
        {
            steps
            {
               script
               { 
                   git branch: 'nbalu-001', credentialsId: '53b4e21b-33fe-4444-8b3e-426b374eba0b', url: 'git@github.ibm.com:BigSQLSVT/standalone-pipeline.git'
               }
            } 
        } 

        
        stage ("bigsql-uninstall") {
            steps  {
                script {
                 sh """
		           /usr/ibmpacks/IBM-Big_SQL/7.1.0.0/bigsql-cli/uninstall/uc-uninstall
                   yes | /usr/ibmpacks/IBM-Big_SQL/7.1.0.0/bigsql-cli/uninstall/bigsql-uninstall -removeBigSQLUser -scmAdminPassword "${env.CLOUDERA_PWD}"  -hostList /tmp/bigsqlHostList
                 """
              }  
            }
        }

        stage ("Install repo") {
           steps {
              script {
                 sh """
                    cd /etc/yum.repos.d/
                    wget "${env.BIGSQL_BUILD}"
                    yum install "${env.BIGSQL_RPM}" -y
                 """
              }
            }
        } 
        
        stage("Set CM_HOST, hdfs_user") {
              steps {  
                  script { 
                      sh """
                        cd /usr/ibmpacks/IBM-Big_SQL/7.1.0.0/bigsql-cli/
                        ./bigsql-config -set "CM_HOST="${env.CLOUDERA_HOST}""
                        ./bigsql-config -set "HDFS_USER="${env.HDFS_USER}""
                        ./bigsql-config -set "MLN_COUNT="${env.MLN_COUNT}""
		            	su - hdfs -c 'kinit -kt /etc/security/keytabs/hdfs.keytab hdfs/"${env.CLOUDERA_HOST}"@IBM.COM'
                        touch /tmp/bigsqlHostList
                        echo "${env.CLOUDERA_HOST}" > /tmp/bigsqlHostList
                        echo "${env.CLOUDERA_HOST3}" >> /tmp/bigsqlHostList
                        echo "${env.CLOUDERA_HOST4}" >> /tmp/bigsqlHostList
                        """
                    }
                } 
            } 
        stage ('INSTALL BIGSQL') {
            steps  {
                script {

                 sh """
                    sed -i 's/#BIGSQL_PASSWORD/BIGSQL_PASSWORD/g'      "${bigsql_config}"
                    sed -i 's/#CM_ADMIN_PASSWORD/CM_ADMIN_PASSWORD/g'  "${bigsql_config}"
                    /usr/ibmpacks/IBM-Big_SQL/7.1.0.0/bigsql-cli/bigsql-install
                   """
              }      
                echo "BIGSQL INSTALLED SUCCEFULLY"
            }
        } 
       
       stage("bigsql-admin-smoke") {
              steps {  
                  script { 
                      sh """
		         sleep 60
                         su - bigsql -c "/usr/ibmpacks/current/bigsql/bigsql/bin/bigsql status"
			             su - bigsql -c "/usr/ibmpacks/IBM-Big_SQL/7.1.0.0/bigsql-cli/bigsql-admin -restart"
                         sleep 60
                         su - bigsql -c "${smoke_cmd}"
                         """
                  }
              } 
        }     
        
       stage ('Install Bigsql Console') {
            steps  {
                script {

                 sh """
                    sed -i 's/uc.bigsql.host=/uc.bigsql.host=${env.CLOUDERA_HOST}/g' "${config_ini}"
                    sed -i 's/uc.hostname=/uc.hostname=${env.CLOUDERA_HOST}/g' "${config_ini}"
                    sed -i '31{s/^/#/}' "${uc_install}" > /dev/null
                    sed -i '32 i config_file="${config_ini}"' "${uc_install}" > /dev/null
                    sed -i '211,236{s/^/#/}' "${uc_install}" > /dev/null
	                sed -i '237 i BIGSQL_PASSWORD="bigsql"' "${uc_install}" > /dev/null
                    /usr/ibmpacks/IBM-Big_SQL/7.1.0.0/bigsql-cli/uc-install
                   """
              }      
                echo "BIGSQL CONSOLE INSTALLED SUCCEFULLY"
            }
        } 

        stage ("Install jsqsh") {
           steps {
              script {
                 sh """
                    cd /etc/yum.repos.d/
                    wget "${env.JSQSH_BUILD}"
                    yes | yum install "${env.JSQSH_RPM}"
                   """
              }
            }
        } 

          stage("Snowflake Deployement") {
              steps {  
                  script { 
                      sh """
                         su - hdfs -c  "hdfs dfs -mkdir /tmp/svt408"
		            	 su - hdfs -c  "hdfs dfs -chmod 777 /tmp/svt408"
			             su - hdfs -c  "hdfs dfs -setfacl -R -m user:bigsql:rwx /tmp/svt408"
			             su - hdfs -c  "hdfs dfs -setfacl -R -m default:user:bigsql:rwx /tmp/svt408"
                         /root/snowflake.sh -j jdbc:db2://${env.CLOUDERA_HOST}:32051/bigsql -e jsqsh -u bigsql -w bigsql -m all -l /tmp/svt408/-n 1 | tee sample11.txt
                         """
                  }
              } 
        } 

        stage("Bigsql-backup ") {
              steps {  
                  script { 
                sh """
                   mkdir -p  /tmp/backup/bigsql_dbbackup1;chown -R bigsql:hadoop /tmp/backup/bigsql_dbbackup1;chmod -R 777 /tmp/backup/bigsql_dbbackup1
                   ssh -t  ${env.CLOUDERA_HOST3} "mkdir -p  /tmp/backup/bigsql_dbbackup1;chown -R bigsql:hadoop /tmp/backup/bigsql_dbbackup1;chmod -R 777 /tmp/backup/bigsql_dbbackup1"
                   ssh -t  ${env.CLOUDERA_HOST4} "mkdir -p  /tmp/backup/bigsql_dbbackup1;chown -R bigsql:hadoop /tmp/backup/bigsql_dbbackup1;chmod -R 777 /tmp/backup/bigsql_dbbackup1"
		           su - bigsql -c 'db2 deactivate db bigsql'
                   su - bigsql -c 'db2 update db cfg for bigsql using logarchmeth1 logretain'
                   su - bigsql -c 'db2 terminate'
                   su - bigsql -c 'db2 "backup db bigsql on all dbpartitionnums to /tmp/backup/bigsql_dbbackup1"'
                   su - bigsql -c "/usr/ibmpacks/current/bigsql/bigsql/bin/bar.py  -m backup"
                   su - bigsql -c 'db2 activate db bigsql'
                   """
                  }
              } 
        }  

        stage("Bigsql-restore") {
              steps {  
                  script { 
                      sh """
                         su - bigsql -c "yes | /usr/ibmpacks/current/bigsql/bigsql/bin/bar.py -m restore"
                         """
                  }
              } 
        } 
         stage ('ENABLE BIGSQL HA') { 
            steps  {
                script { 
                      sh """
                         yes | /usr/ibmpacks/IBM-Big_SQL/7.1.0.0/bigsql-cli/bigsql-admin -enableHA "${env.BIGSQL_SECOND_HEADNODE}"
                         """
                  }   
            }
        }    
        stage("bigsql-admin-failoverController Enable") { 
              steps {  
                  script { 
                      sh """
                         sleep 60
                         /usr/ibmpacks/IBM-Big_SQL/7.1.0.0/bigsql-cli/bigsql-admin -failoverController Enable
                         """
              }
           }
        }    
        stage("bigsql-admin--triggerFailover") {
              steps {  
                  script { 
                      sh """
                         sleep 30
                         su - bigsql -c "/usr/ibmpacks/IBM-Big_SQL/7.1.0.0/bigsql-cli/bigsql-admin -triggerFailover"
                         """
              }
           }
        }    
         
        stage("bigsql-admin-smoke-1") {
              steps {  
                  script { 
                      sh """
                         sleep 60
                         ssh -t "${env.BIGSQL_SECOND_HEADNODE}"  "${smoke_cmd}"
                         """
              }
           }
        }  
	    
	stage("bigsql-admin-failoverController Disable") { 
              steps {  
                  script { 
                      sh """
                         sleep 60
                         ssh -t "${env.BIGSQL_SECOND_HEADNODE}" "/usr/ibmpacks/IBM-Big_SQL/7.1.0.0/bigsql-cli/bigsql-admin -failoverController Disable"
                         """
              }
           }
        }  
	    
        stage("bigsql-admin-removeWorker") { 
              steps {  
                  script { 
                      sh """
                         ssh -t "${env.BIGSQL_SECOND_HEADNODE}" "sed -i 's/#BIGSQL_PASSWORD/BIGSQL_PASSWORD/g' "${bigsql_config}";
                         sed -i 's/#CM_ADMIN_PASSWORD/CM_ADMIN_PASSWORD/g' "${bigsql_config}";/usr/ibmpacks/IBM-Big_SQL/7.1.0.0/bigsql-cli/bigsql-admin -removeWorker "${env.REMOVE_WORKERNODE}""
                         """
              }
           }
        } 
        stage("bigsql-admin-smoke-2") {
              steps {  
                  script { 
                      sh """
                         sleep 60
                         ssh -t "${env.BIGSQL_SECOND_HEADNODE}" "${smoke_cmd}"
                         """
              }
           }
        }      

        stage("bigsql-admin-addWorker") {  
              steps {  
                  script { 
                      sh """
                         ssh -t "${env.BIGSQL_SECOND_HEADNODE}" "/usr/ibmpacks/IBM-Big_SQL/7.1.0.0/bigsql-cli/bigsql-admin -addWorker "${env.ADD_WORKERNODE}"" 
                         """
              }
           }
        }
        stage("bigsql-admin-smoke-3") {
              steps {  
                  script { 
                      sh """
                         sleep 60
                         ssh -t "${env.BIGSQL_SECOND_HEADNODE}" "${smoke_cmd}"
                         """
              }
           }
        }    
        
    }
      post { 
        success {
            sh('echo pipeline finished successfully.')  
        }   
        failure { 
            sh('echo pipeline failed.')
        }  
        always { 
            sh('echo pipeline execution complete.')
        }
      }
}
